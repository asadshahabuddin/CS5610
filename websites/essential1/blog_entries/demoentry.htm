<!-- Entry 1 : BEGIN -->
<!-- Title -->
<h3>Completed experiments 6 through 10</h3>

<!-- Contents : BEGIN -->
<p>
    The experiments for Week 2 are mainly focused on Twitter's Bootstrap framework by exploring the associated tags, elements, classes and style properties. The learning process for this week involved responsive design, navigation bars, tabbed interfaces, typography, panels, carousels and accordions. The experiments completed for the week have been listed below.
    <br />

    <ul>
        <li>
            <a href="../experiments/html/06-bootstrap-navbar.html">Bootstrap Navigation Bar - Responsive Design. </a>
            <span>
                Twitter's Bootstrap framework has been used to create a navigation bar which is resposive to the screen size (phones, tablets, laptops and desktops) along with the rest of the page. We mainly focus on the navigation bar and its elements, utilizing Bootstrap's classes to format it and create an inverted version of the same. The items form part of a drop down list from a contextual button on the top-right in the case of a small screen and expands to a full-blown menu as it is stretched to a larger size. Other elements have also been added to make the page complete.
            </span>
        </li>
        <li>
            <a href="../experiments/html/07-bootstrap-tabs.html">Bootstrap Tabs. </a>
            <span>
                This page illustrates the use of Twitter's Bootstrap framework to create a tabbed interface. Every tab leads to a separate section with the corresponding content. The 'nav' class and 'tab data-toggle' property has been used used to achieve the desired effect. There are a total of five sections (tabs) on this page and cliking on them leads to the desired section. A custom CSS file is referenced in addition to the Bootstrap CSS files, which in turn defines the properties to provide background and other style sheet information for the navigation bar.
            </span>
        </li>
        <li>
            <a href="../experiments/html/08-bootstrap-schedule.html">Carousels - Class Schedule. </a>
            <span>
                Schedule of classes for the Spring 2015 Semester has been presented in a carousel-based interface defined in the Bootstrap framework. Each slide/carousel-item presents the schedule for a specific subject. The course name is used as the background text for a slide, with the main area composed of all other information associated with the highlighted subject. The last slide represents an empty slot. Navigation is made using arrow keys to the left and right or the bubbles at the bottom of a slide. In addition to these, automatic transition occurs after a fixed interval.
            </span>
        </li>
        <li>
            <a href="../experiments/html/09-bootstrap-elements.html">Bootstrap Elements and Semantics. </a>
            <span>
                The page is used to showcase various elements in the Bootstrap framework. This includes a progress bar and an accessibility guide composed of various kinds of labels meant for a variety of scenarios. A traffic signal guide is created using some of the label colors. The progress bar is at a 100% completion to show the page load status. Each of these elements are placed inside their own division tags and the entire body is enveloped by a 'container' division, which comes with its own specific styling.
            </span>
        </li>
        <li>
            <a href="../experiments/html/10-bootstrap-horoscopes.html">Accordion - Daily Horoscope. </a>
            <span>
                Accordian menus are used to create a daily horoscope page in the form of a navigation list. Clicking on a horoscope title opens up the description which is a complete horoscope summary for the day. The accordian widget results in lucid collapsible components. The first element is open by default. Clicking on another title opens up the corresponding description and closes the other, whereas clicking on the same title again closes all the components. Panels are used to create the overall interface.
            </span>
        </li>
    </ul>
</p>
<!-- Contents : END -->
<!-- Entry 1 : END -->

<!-- Entry 2 : BEGIN -->
<!-- Title -->
<h3>Completed experiments 11 through 15</h3>

<!-- Contents : BEGIN -->
<p>
    jQuery is the topic for this week. The experiments were spent in exploring various methods, events and actions of the jQuery library. jQuery AJAX, JavaScript regular expressions and jQuery UI have also been put to use in completing most of the work.
    <br />

    <ul>
        <li>
            <a href="../experiments/html/11-jq-image-slideshow.html">jQuery Events - Image Slideshow. </a>
            <span>
                jQuery (JavaScript) events have been used to create an image slideshow. An initial image is displayed on the webpage until a mouse click event occurs, upon which it changes to something else. This continues in a loop using the images specified in the scripts. JavaScript inspects the current image and assigns another on mouse click based on the existing one. The division size has been hard-coded to maintain layout uniformity. Click on the image to try it yourself.
            </span>
        </li>
        <li>
            <a href="../experiments/html/12-jq-animate.html">jQuery Animations. </a>
            <span>
                The jQuery animate() method has been utilized to create division and text based animations. A click on the 'Animate' button starts the sequence. First of all, the text changes, followed by a change in width, height, opacity level and text size. The animation sequence continues with a subsequent reduction in height and width respectively. This would be the final state of our division tag. Another click on the animate button starts the process over. However, the text and opacity level do not change.
            </span>
        </li>
        <li>
            <a href="../experiments/html/13-jq-unfold.html">jQuery Slide - Product Unveil. </a>
            <span>
                The Product Unveil page uses jQuery's slide method and mouse events to unveil a new product. This page is populated with the name, contextual image, specifications and description of the product. In its initial state, the page displays a title and an inverted area sensitive to a mouse click event. On clicking it, the page unveils itself and the product. For clarity and a professional look, the clickable area hides itself on clicking.
            </span>
        </li>
        <li>
            <a href="../experiments/html/14-jq-ajax.html">jQuery AJAX and Regex - Movie of the Day. </a>
            <span>
                An AJAX call is employed to query IMDB and generate a movie page. The response is a JSON object with detailed information about the movie in various fields such as name, abridged and complete plot, poster, languages, writers, etc. The object is converted to a plain text string which is then parsed using regular expressions to extract the name, complete plot and movie poster. Finally, this filtered information undergoes formatting and is displayed on the HTML page. The response format is JSONP and 'My API Films' is used to get the request URI.
            </span>
        </li>
        <li>
            <a href="../experiments/html/15-jq-autocomplete.html">jQuery Autocomplete - U.S. State Search. </a>
            <span>
                A typeahead search is presented for the 50 U.S. States. The field works as expected. You may type in a part of the name of any of the states and this field shows suggestions based on your search token. Any text value one character and up is treated as a valid search token. If no suggestions appear, there are no matching states. jQuery UI and its autocomplete feature have been utilized to achieve the desired result. Custom CSS has been applied to format the drop down menu.
            </span>
        </li>
    </ul>
</p>
<!-- Contents : END -->
<!-- Entry 2 : END -->

<!-- Entry 3 : BEGIN -->
<!-- Title -->
<h3>Completed experiments 16 through 20</h3>

<!-- Contents : BEGIN -->
<p>
    We are in for a long journey into the AngularJS territory. The experiments were spent in exploring various attributes, variables and methods of AngularJS. Bootstrap is widely adopted to create the user interface of this week's application - A 5-part voyage in pursuit of a single-page, multi-tabbed Book Search application.
    <br />

    <ul>
        <li>
            <a href="../experiments/html/16-coterie-1.html">Local Library. </a>
            <span>
                A local library is created by using hard-coded values for table entries. AngularJS and Bootstrap have been leveraged to create the page. New entries can be added and existing ones can be updated as well as removed. Iterators have been used to populate the rows using static data. Scope magic variable forms the necessary binding, update the page automatically and results in a robust single-page application.
            </span>
        </li>
        <li>
            <a href="../experiments/html/17-coterie-2.html">Online Library - Google Books API. </a>
            <span>
                This page builds on top of the previous experiment, as does every page in this week's series. Instead of using static data, Google Books API is queried to receive JSON response, which in turn gets parsed and populates the table. All features from the previous experiment are inherited. A static query is created using a particular search token and the result is parsed to populate the following table.
            </span>
        </li>
        <li>
            <a href="../experiments/html/18-coterie-3.html">Online Book Search - Google Books API. </a>
            <span>
                A universal search facility constitutes a major upgrade on the existing library application. No hard-coded values are allowed anymore. Books can be searched by name and all relevent results are presented in tabular form. As we have come to expect by now, all previous features are retained or improved upon. Search token typed in by the user completes the query and Google Books API acts as our source.
            </span>
        </li>
        <li>
            <a href="../experiments/html/19-coterie-4.html">Premium Book Search - Google Books API. </a>
            <span>
                This single-page, multi-tabbed application is the biggest update in the series. Users can bookmark search results and view them by clicking on the 'Bookmarks' tab. Bookmarks are also shown in the form of a table and can be deleted and refreshed. Other parts of the page are moved to their respective tabs. Bootstrap library is extended to create the tabbed interface, making for a lucid and uncluttered user experience.
            </span>
        </li>
        <li>
            <a href="../experiments/html/20-coterie-5.html">Premium Book Search II - Google Books API. </a>
            <span>
                The final installment adds a very convenient feature - sorting. Search results can be ordered by individual columns and viewed without breaking the paradigm of single page application. This is the most complete page featuring all previously mentioned features. Table enties are sorted by 'Title' in ascending order by default. Tooltips have also been added to major buttons - Select, Add, Edit, Remove, Bookmark and Remove Bookmark.
            </span>
        </li>
    </ul>
</p>
<!-- Contents : END -->
<!-- Entry 3 : END -->

<!-- Entry 4 : BEGIN -->
<!-- Title -->
<h3>Completed experiments 21 through 25</h3>

<!-- Contents : BEGIN -->
<p>
    A variety of AngularJS topics have been explored this week. I started with last week's final page as a base, and converted it to an application with AngularJS Routing to navigate between sections and display the appropriate data. This was done in a naive manner using Bootstrap's 'Tab Data Toggle' attribute-value pair last week. As the application grew larger, a factory was set up to provide common services for all controllers instead of polluting my global scope. Entire sections are shown or hidden based on context and conditions to improve the user experience, a 'Details' section added as a logical next step for the application which relies on an item's ISBN in local context to fetch all other details from Google's database on request. Finally, the issue of persistence is resolved to render a more complete and practical Book Search service.
    <br />

    <ul>
        <li>
            <a href="../experiments/html/21-books.html">AngularJS Routing - Books. </a>
            <span>
                This week's work adds on to the experiments from the week prior. The Books application utilizes Google Books API to fetch results. Last week's experiments used Bootstrap's 'Tab data toggle' to create tabs for various sections. The current experiment replaces them with AngularJS routing to maintain the paradigm of a single page application while being contextual based on search results and content tied to various links. Bookmarks added are logged in the browser's console for now. Contextual controllers and an AngularJS Book Service are used. Visual tweaks include a Bootstrap navigation bar fixed at the top of the page and embedded links. Console logging has also been bumped up and is fervently maintained going forward.
            </span>
        </li>
        <li>
            <a href="../experiments/html/22-books.html">AngularJS Factory - Books (Bookmarks). </a>
            <span>
                Bookmarks tab is visually populated with items added to a person's favorites. Bookmarked items can still be viewed in console along with graphical representation. This has been achieved by facilitating communication between multiple controllers using my AngularJS Book Factory. Items can also be removed from bookmarks with immediate content refresh to reflect it on the webpage.
            </span>
        </li>
        <li>
            <a href="../experiments/html/23-books.html">Contextual Elements - Books. </a>
            <span>
                User experience is refined by selective rendering of interface elements based on state. When a user arrives at this page, 'Results' section is hidden until something is searched for. Likewise, 'Bookmarks' section displays a message indicating the absence of bookmarks when that situation comes to pass. On the other hand, favorite items are displayed in tabular form when there is something to display. This is done with the help of 'ng-show' attribute and correct conditions entered as value.
            </span>
        </li>
        <li>
            <a href="../experiments/html/24-books.html">AngularJS Services - Books (Details). </a>
            <span>
                Details section has been added to the application. After an item is added to favorites, you may navigate to the bookmarks section where an additional button is present beside each favorite item. Clicking on it will take you to that book's details page with all sorts of relavant information including a link to preview the item in Google Books. Clicking directly on 'Details' link opens nothing since the associated URL mentioned in its route provider expects an argument - a ISBN.
            </span>
        </li>
        <li>
            <a href="../experiments/html/25-books.html">AngularJS Persistence - Books. </a>
            <span>
                All previous iterations had one common flaw - search results were not persistent. The issue is addressed in this experiment. When you move between sections and come back to the home page, the application's former state persists. Search results from your latest query will not be cleared on switching unless another search is executed. This is especially important if you plan to switch between the three sections, navigate back to home and add a couple of additional bookmarks. Factory's API has been extended to serve my purpose and conclude the series for this week.
            </span>
        </li>
    </ul>
</p>
<!-- Contents : END -->
<!-- Entry 4 : END -->

<!-- Entry 5 : BEGIN -->
<!-- Title -->
<h3>Completed experiments 26 through 30</h3>

<!-- Contents : BEGIN -->
<p>
    We get closer to a complete MEAN stack this week by adding 'E' and 'N' to the existing 'A'. I learned a lot about Node.js and the associated Express library through a series of experiments centered on the topic, while leveraging the capabilities of my applications by implementing everything learnt hitherto. I setup my own server on OpenShift and also got a good amount of experience dealing with the RHC command-line utility.
    <br />

    <ul>
        <li>
            <a href="../experiments/html/26-node.html">Node.js Server. </a>
            <span>
                This is an introduction to Node.js server and OpenShift. A server.js file is hosted on a Node.js application created on OpenShift. Cross-origin resource sharing is also demonstrated as the client file (this one) queries a server located on a separate domain which allows queries for just the author object from any source. The URL to fetch equivalent JSON data can be found <a href="http://node1-asadshahabuddin.rhcloud.com/api/author">here</a>. Clicking on the Query Author button does the trick.
            </span>
        </li>
        <li>
            <a href="../experiments/html/27-node.html">Shopping List. </a>
            <span>
                A Shopping list application makes up the latest experiment. Node.js, AngularJS and Express have been used to come up with it. Data is stored statically on the server and all basis operations such as Add, Delete, Edit and Save are available. Clicking on the blue button saves data on the server and makes these changes persistent irrespective of page reloads. A server refresh will naturally reset these changes since we don't have an actual database yet.
            </span>
        </li>
        <li>
            <a href="../experiments/html/28-node.html">Data Relationship. </a>
            <span>
                Shopping List has been expanded. When you click on an item, what you see in an additional list of people who requested that item. Requestors can be removed from the second list and changes will be saved in the same way as before. Local copies are edited by merely editing the item or deleting a person associated with it. However, they must be saved by clicking on the blue button to make them persistent on the server.
            </span>
        </li>
        <li>
            <a href="../experiments/html/29-node.html">Cookie. </a>
            <span>
                Browser cookies are exhibited as part of this experiment. You need to fill up the page with all the information it needs. After that, you click on the 'Sing in' button. This will set a cookie which can be inspected using your browser's console window. An alert message will tell you the same.
            </span>
        </li>
        <li>
            <a href="../experiments/html/30-node.html">Mail. </a>
            <span>
                A Mail utility is created using the Nodemailer library. Clicking on the link to my experiment will take you to a page which gives a field, a text area and a submit button. Fill up the 'Email' and 'Message' fields with the recepient's Email address and an optional message for them to read. Click 'Send' to transmit your email. If you do not specify an Email address, a message will prompt you to reconsider and fill it up. Check your browser's console window to see additional messages.
            </span>
        </li>
    </ul>
</p>
<!-- Contents : END -->
<!-- Entry 5 : END -->

<!-- Entry 6 : BEGIN -->
<!-- Title -->
<h3>Completed experiments 31 through 35</h3>

<!-- Contents : BEGIN -->
<p>
    MEAN Stack has been achieved. The week was spent on the greatest number of topics, out of which most amount of emphasis has been given on the use of MongoDB in Node.js applications. These experiments combine server and client side capabilities to bring engaging and useful web applications to life.
    <br/>

    <ul>
        <li>
            <a href="../experiments/html/31-mongo.html">Mongoose on OpenShift. </a>
            <span>
                The experiment focuses mainly on MongoDB configuration on OpenShift and accessing collections (data) stored online using Mongoose interface from within Node.js. A shopping list collection is stored on OpenShift's MongoDB instance. I have used Mongoose to access data and created listeners to provide an API for accessing these shopping list documents. When you click on the link, JSON data will be output on your browser window.
            </span>
        </li>
        <li>
            <a href="../experiments/html/32-weather.html">Weather. </a>
            <span>
                Weather API is leveraged to create a weather application. The webpage has a text input field where you type in the name of any city. The city is looked for and the associated weather information is returned. Various kinds of parameters and relavant units of measurement are rendered to make it useful. Results are near estimations since Weather API's weather results aren't updated every minute.
            </span>
        </li>
        <li>
            <a href="../experiments/html/33-weather.html">Weather (Premium). </a>
            <span>
                A weather-widget-like application has been created which flips over to show weather results for the specified city. This marks a massive visual upgrade over the last weather application. In addition to improved aesthetics, blank string validation is also made. You can try that by pressing Select without entering the name of a city. You can go back and select another city just like the Mac OS X Weather widget.
            </span>
        </li>
        <li>
            <a href="../experiments/html/34-expense-tracking.html">Expense Tracking. </a>
            <span>
                I have used the entire MEAN stack to create a finance-oriented web application. This page provides the functionality of an Expense Tracker which would let us view, add, edit and delete expenses. Expenses will appear in their order of creation and changes made to a record will persist in the database hosted on OpenShift. We finally have a robust data store to last a relative eternity.
            </span>
        </li>
        <li>
            <a href="../experiments/html/35-expense-tracking.html">Expense Tracking (Premium). </a>
            <span>
                Expense Tracking has been refined and new features have been added to it. The page now shows balance for every person who is involved in one or more expense. Every create, delete and edit-save operation updates all balances without the necessity of an explicit operation. If all entries related to an individual have been removed, the record for that person in the second table is also purged. Both positive and negative amounts are shown which makes it close to a real-world application. Of course, it is much simpler.
            </span>
        </li>
    </ul>
</p>
<!-- Contents : END -->
<!-- Entry 6 : END -->

<!-- Entry 7 : BEGIN -->
<!-- Title -->
<h3>Updated Homepage</h3>

<!-- Contents : BEGIN -->
<p>
    I enhanced my homepage this week. CSS and HTML have been used to make it a resposive and attractive webpage. Content has been divided into sections with information about my academics, interests, experiments and contact methods.
</p>
<!-- Contents : END -->
<!-- Entry 7 : END -->

<!-- Entry 8 : BEGIN -->
<!-- Title -->
<h3>Completed experiments 36 through 40</h3>

<!-- Contents : BEGIN -->
<p>
    Passport based authentication, session tracking, personalization and CSS elements have been explored in greater depth. Authentication mechanism has been used to create and validate user accounts for my project website wherein access to profile page is restricted based on a user's login status. The profile page is personalized with the user's name and their city's weather update. Bootstrap has been abandoned to create a welcome page with an Owl Carousel.
    <br/>

    <ul>
        <li>
            <a href="../experiments/html/36-carousel.html">CSS Image Carousel. </a>
            <span>
                The first experiment exhibits a CSS carousel not based on Bootstrap. I had help from an independent library called Owl Carousel
            </span>
        </li>
        <li>
            <a href="../experiments/html/37-register.html">MEAN Account Registration. </a>
            <span>
                MEAN is used to create an account on my project website. Authentication information persists in a MongoDB database and you will be logged in after registering successfully. Extense console logging has also been done as an additional feature for developers. Without registration or stealing someone else's information, you cannot log into the web application. What follows after signing in a scope for future experiments.
            </span>
        </li>
        <li>
            <a href="../experiments/html/38-login.html">Passport Authentication. </a>
            <span>
                Passport is used to create an authentication mechanism for my web application. Both username and password must be entered for authentication to take place. If both are correct (verified against a MongoDB collection), you will be logged in to your homepage (subject of my next experiment).
            </span>
        </li>
        <li>
            <a href="../experiments/html/39-news.html">The New York Times API. </a>
            <span>
                I have used The New York Times API and the Weather API to create a profile page. Both APIs return JSON data which is parsed to create a simple and intuitive interface. Recent headlines are displayed with newest on top. Clicking on a headline will take you to the full story on The New York Times website. Weather information is presented in its own card on the right.
            </span>
        </li>
        <li>
            <a href="../experiments/html/40-weather.html">Personalization and Weather API. </a>
            <span>
                When a user registers with my project website, he/she is asked to enter their city. From this point forward, whenever a user signs in, the weather card defaults to his/her city. You may continue to fetch weather updates for other cities but the weather card defaults to your city on page reload. User preferences are remembered and used to personalize their home page.
            </span>
        </li>
    </ul>
</p>
<!-- Contents : END -->
<!-- Entry 8 : END -->
<!-- End of demoentry.htm -->