<!-- Entry 1 : BEGIN -->
<!-- Title -->
<h3>Completed experiments 6 through 10</h3>

<!-- Contents : BEGIN -->
<p>
    The experiments for Week 2 are mainly focused on Twitter's Bootstrap framework by exploring the associated tags, elements, classes and style properties. The learning process for this week involved responsive design, navigation bars, tabbed interfaces, typography, panels, carousels and accordions. The experiments completed for the week have been listed below.
    <br />

    <ul>
        <li>
            <a href="../experiments/html/06-bootstrap-navbar.html">Bootstrap Navigation Bar - Responsive Design. </a>
            <span>
                Twitter's Bootstrap framework has been used to create a navigation bar which is resposive to the screen size (phones, tablets, laptops and desktops) along with the rest of the page. We mainly focus on the navigation bar and its elements, utilizing Bootstrap's classes to format it and create an inverted version of the same. The items form part of a drop down list from a contextual button on the top-right in the case of a small screen and expands to a full-blown menu as it is stretched to a larger size. Other elements have also been added to make the page complete.
            </span>
        </li>
        <li>
            <a href="../experiments/html/07-bootstrap-tabs.html">Bootstrap Tabs. </a>
            <span>
                This page illustrates the use of Twitter's Bootstrap framework to create a tabbed interface. Every tab leads to a separate section with the corresponding content. The 'nav' class and 'tab data-toggle' property has been used used to achieve the desired effect. There are a total of five sections (tabs) on this page and cliking on them leads to the desired section. A custom CSS file is referenced in addition to the Bootstrap CSS files, which in turn defines the properties to provide background and other style sheet information for the navigation bar.
            </span>
        </li>
        <li>
            <a href="../experiments/html/08-bootstrap-schedule.html">Carousels - Class Schedule. </a>
            <span>
                Schedule of classes for the Spring 2015 Semester has been presented in a carousel-based interface defined in the Bootstrap framework. Each slide/carousel-item presents the schedule for a specific subject. The course name is used as the background text for a slide, with the main area composed of all other information associated with the highlighted subject. The last slide represents an empty slot. Navigation is made using arrow keys to the left and right or the bubbles at the bottom of a slide. In addition to these, automatic transition occurs after a fixed interval.
            </span>
        </li>
        <li>
            <a href="../experiments/html/09-bootstrap-elements.html">Bootstrap Elements and Semantics. </a>
            <span>
                The page is used to showcase various elements in the Bootstrap framework. This includes a progress bar and an accessibility guide composed of various kinds of labels meant for a variety of scenarios. A traffic signal guide is created using some of the label colors. The progress bar is at a 100% completion to show the page load status. Each of these elements are placed inside their own division tags and the entire body is enveloped by a 'container' division, which comes with its own specific styling.
            </span>
        </li>
        <li>
            <a href="../experiments/html/10-bootstrap-horoscopes.html">Accordion - Daily Horoscope. </a>
            <span>
                Accordian menus are used to create a daily horoscope page in the form of a navigation list. Clicking on a horoscope title opens up the description which is a complete horoscope summary for the day. The accordian widget results in lucid collapsible components. The first element is open by default. Clicking on another title opens up the corresponding description and closes the other, whereas clicking on the same title again closes all the components. Panels are used to create the overall interface.
            </span>
        </li>
    </ul>
</p>
<!-- Contents : END -->
<!-- Entry 1 : END -->

<!-- Entry 2 : BEGIN -->
<!-- Title -->
<h3>Completed experiments 11 through 15</h3>

<!-- Contents : BEGIN -->
<p>
    jQuery is the topic for this week. The experiments were spent in exploring various methods, events and actions of the jQuery library. jQuery AJAX, JavaScript regular expressions and jQuery UI have also been put to use in completing most of the work.
    <br />

    <ul>
        <li>
            <a href="../experiments/html/11-jq-image-slideshow.html">jQuery Events - Image Slideshow. </a>
            <span>
                jQuery (JavaScript) events have been used to create an image slideshow. An initial image is displayed on the webpage until a mouse click event occurs, upon which it changes to something else. This continues in a loop using the images specified in the scripts. JavaScript inspects the current image and assigns another on mouse click based on the existing one. The division size has been hard-coded to maintain layout uniformity. Click on the image to try it yourself.
            </span>
        </li>
        <li>
            <a href="../experiments/html/12-jq-animate.html">jQuery Animations. </a>
            <span>
                The jQuery animate() method has been utilized to create division and text based animations. A click on the 'Animate' button starts the sequence. First of all, the text changes, followed by a change in width, height, opacity level and text size. The animation sequence continues with a subsequent reduction in height and width respectively. This would be the final state of our division tag. Another click on the animate button starts the process over. However, the text and opacity level do not change.
            </span>
        </li>
        <li>
            <a href="../experiments/html/13-jq-unfold.html">jQuery Slide - Product Unveil. </a>
            <span>
                The Product Unveil page uses jQuery's slide method and mouse events to unveil a new product. This page is populated with the name, contextual image, specifications and description of the product. In its initial state, the page displays a title and an inverted area sensitive to a mouse click event. On clicking it, the page unveils itself and the product. For clarity and a professional look, the clickable area hides itself on clicking.
            </span>
        </li>
        <li>
            <a href="../experiments/html/14-jq-ajax.html">jQuery AJAX and Regex - Movie of the Day. </a>
            <span>
                An AJAX call is employed to query IMDB and generate a movie page. The response is a JSON object with detailed information about the movie in various fields such as name, abridged and complete plot, poster, languages, writers, etc. The object is converted to a plain text string which is then parsed using regular expressions to extract the name, complete plot and movie poster. Finally, this filtered information undergoes formatting and is displayed on the HTML page. The response format is JSONP and 'My API Films' is used to get the request URI.
            </span>
        </li>
        <li>
            <a href="../experiments/html/15-jq-autocomplete.html">jQuery Autocomplete - U.S. State Search. </a>
            <span>
                A typeahead search is presented for the 50 U.S. States. The field works as expected. You may type in a part of the name of any of the states and this field shows suggestions based on your search token. Any text value one character and up is treated as a valid search token. If no suggestions appear, there are no matching states. jQuery UI and its autocomplete feature have been utilized to achieve the desired result. Custom CSS has been applied to format the drop down menu.
            </span>
        </li>
    </ul>
</p>
<!-- Contents : END -->
<!-- Entry 2 : END -->

<!-- Entry 3 : BEGIN -->
<!-- Title -->
<h3>Completed experiments 16 through 20</h3>

<!-- Contents : BEGIN -->
<p>
    We are in for a long journey into the AngularJS territory. The experiments were spent in exploring various attributes, variables and methods of AngularJS. Bootstrap is widely adopted to create the user interface of this week's application - A 5-part voyage in pursuit of a single-page, multi-tabbed Book Search application.
    <br />

    <ul>
        <li>
            <a href="../experiments/html/16-coterie-1.html">Local Library. </a>
            <span>
                A local library is created by using hard-coded values for table entries. AngularJS and Bootstrap have been leveraged to create the page. New entries can be added and existing ones can be updated as well as removed. Iterators have been used to populate the rows using static data. Scope magic variable forms the necessary binding, update the page automatically and results in a robust single-page application.
            </span>
        </li>
        <li>
            <a href="../experiments/html/17-coterie-2.html">Online Library - Google Books API. </a>
            <span>
                This page builds on top of the previous experiment, as does every page in this week's series. Instead of using static data, Google Books API is queried to receive JSON response, which in turn gets parsed and populates the table. All features from the previous experiment are inherited. A static query is created using a particular search token and the result is parsed to populate the following table.
            </span>
        </li>
        <li>
            <a href="../experiments/html/18-coterie-3.html">Online Book Search - Google Books API. </a>
            <span>
                A universal search facility constitutes a major upgrade on the existing library application. No hard-coded values are allowed anymore. Books can be searched by name and all relevent results are presented in tabular form. As we have come to expect by now, all previous features are retained or improved upon. Search token typed in by the user completes the query and Google Books API acts as our source.
            </span>
        </li>
        <li>
            <a href="../experiments/html/19-coterie-4.html">Premium Book Search - Google Books API. </a>
            <span>
                This single-page, multi-tabbed application is the biggest update in the series. Users can bookmark search results and view them by clicking on the 'Bookmarks' tab. Bookmarks are also shown in the form of a table and can be deleted and refreshed. Other parts of the page are moved to their respective tabs. Bootstrap library is extended to create the tabbed interface, making for a lucid and uncluttered user experience.
            </span>
        </li>
        <li>
            <a href="../experiments/html/20-coterie-5.html">Premium Book Search II - Google Books API. </a>
            <span>
                The final installment adds a very convenient feature - sorting. Search results can be ordered by individual columns and viewed without breaking the paradigm of single page application. This is the most complete page featuring all previously mentioned features. Table enties are sorted by 'Title' in ascending order by default. Tooltips have also been added to major buttons - Select, Add, Edit, Remove, Bookmark and Remove Bookmark.
            </span>
        </li>
    </ul>
</p>
<!-- Contents : END -->
<!-- Entry 3 : END -->
<!-- End of demoentry.htm -->